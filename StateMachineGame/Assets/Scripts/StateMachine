//MIKENNA'S CODE
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.AI;


public enum theStates
{

    dead,
    normal,
    attack
}

public class StateMachine : MonoBehaviour
{
    public GameObject bossOne;
    public GameObject bossTwo;
    public GameObject bossThree;
    public GameObject player;

    //CHECK ENEMY AI FORUM FOR CODE BY Eiznek
    //STATES
    public theStates currentState = theStates.normal;
    private theStates nextState = theStates.normal;
    private Transform playerTarget;

  //  public theStates defense = theStates.defense;
  //  public theStates attack = theStates.attack;
    //private theStates 

    //CHECK ENEMY AI FORUM FOR CODE BY Eiznek
    public float viewDistance = 5f;
    //THE RADIUS WHERE THE ENEMY WILL SEE YOU
    public float radius = 1f;

    public Vector3 playerPos;
    public Vector3 enemyPos;
    private Quaternion lookRotation;

    private void Start()
    {
        enemyPos = transform.position;
        
    }

    //GetRandomDir method from Simple Public Enemy AI video
    //Generates random normalized direction
    private static Vector3 GetRandomDir()
    {
        return new Vector3(UnityEngine.Random.Range(-1f, 1f), UnityEngine.Random.Range(-1f, 1f)).normalized;
    }

    //GetRoamingPos method from Simple Public Enemy AI video

    private Vector3 GetRoamingPos()
    {
        return enemyPos + GetRandomDir() * Random.Range(10f, 50f);

    }

    //this game's start function
    public virtual IEnumerator StartGame()
    {
        yield break;
    }


    //for the defensive or scared state of our creatures
    public virtual IEnumerator Defense()
    {
        yield break;
    }

    //for the normal state of our creatures
    public virtual IEnumerator Normal()
    {
        yield break;
    }
    // Update is called once per frame
    public virtual void Update()
    {

    }


    public void FollowTarget()
    {
        //find player position
        //follow the player
        GameObject.FindGameObjectsWithTag("Player");
        playerPos = player.transform.position;
        lookRotation = Quaternion.LookRotation(playerPos, enemyPos);
        Quaternion.Slerp(bossOne.transform.rotation, player.transform.rotation, Time.deltaTime);

        //if player gets within range of boss enemy
        //then follow the player
    }


}
